<template>
  <!-- 
    This is the target element for React to render into.

    Give the div a `ref` which makes it accessible under `this.$refs` in our
    `defineComponent` object method properties.

    We add v-bind="$attrs" to get the leftover props to get added to the
    div. See the comment for `inheritAttrs` for details.
  -->
  <div ref="reactContainer" v-bind="$attrs"></div>
</template>

<script lang="ts">
import { defineComponent, onMounted } from 'vue';
/**
 * NOTE:
 *
 * If this `import` is failing, it's because the Vue3 component needs to be
 * built. Go to the root directory and run `yarn build` to build all the
 * components from scratch. Of if you have already run `yarn build:standalone`
 * then you can also just run `yarn build:vue3`.
 */
import { createWysimark } from '../../../wysimark-editor/.dist/standalone/index';

export default defineComponent({
  /**
   * This is a friendly name but is not used to determine the name of the tag.
   * That is defined in the parent Component in its `components` property.
   */

  name: 'WysimarkVue3Component',

  /**
   * Disable attribute inheritance which fixes an issue.
   *
   * By default, the <template> will inherit the attributes that aren't
   * specified in `props`. This is actually what we want. For some reason on
   * HabitStack, this works but not in production so it may be because
   * something is causing inheritAttrs to be false. We add the attributes
   * back in by using v-bind="$attrs" as specified here:
   *
   * https://v3.vuejs.org/guide/component-attrs.html#attribute-inheritance
   *
   * Still, we want to disable inheritAttrs here in case there is some
   * weird interaction.
   */

  inheritAttrs: false,

  /**
   * Specify the props to pass in. They are available in the `setup` method as
   * the first argument or as part of `this.$props`
   */

  props: {
    modelValue: {
      type: String,
      required: true,
    },
    minHeight: {
      type: Number,
      required: false,
    },
    maxHeight: {
      type: Number,
      required: false,
    },
    appName: {
      type: String,
      required: true,
    },
    documentId: {
      type: String,
      required: true,
    },
    apiUrl: {
      type: String,
      required: true,
    },
    apiContext: {
      type: Object,
      required: true,
    },
  },

  setup(props) {
    /**
     * HINT:
     *
     * Whatever is returned from the `setup` method becomes part of `this`.
     * For exmaple, `this` can be accessed from the `methods` object defined
     * in the component.
     */

    return {
      props,
    };
  },
  /**
   * DO THIS NEXT!!!!!!!!!!!!!
   * DECEMBER 7, 2021
   *
   * Move `mounted` into `setup` by returning an `onMounted` method.
   * If we do it there, we get access to the `props` which should be typed
   * properly which should, hopefully, fix the typing errors we get
   * when we use `yarn start:dev`
   *
   * https://v3.vuejs.org/guide/composition-api-lifecycle-hooks.html
   */
  mounted() {
    const props = this.props;

    /**
     * Create an `editorRef` object that we can return immediately and then
     * populate with `editorRef.current` later with the actual `Editor` object.
     */
    /**
     * HINT:
     *
     * We create the React Element here but it is rendered to the DOM in the
     * `mounted` method.
     */

    const wysimark = createWysimark(this.$refs.reactContainer, {
      initialMarkdown: props.modelValue,
      minHeight: props.minHeight,
      maxHeight: props.maxHeight,
      appName: props.appName,
      documentId: props.documentId,
      apiUrl: props.apiUrl,
      apiContext: props.apiContext,
      onChange: (event) => {
        const markdown = event.editor.getMarkdown();
        this.$emit('update:modelValue', markdown);
      },
    });

    this.wysimark = wysimark;
  },
  beforeUnmount() {
    /**
     * FIXME:
     *
     * Working on this right now. Check if this works.
     *
     * Unmount the React component before the Vue component is unmounted
     */
    // ReactDOM.unmountComponentAtNode(this.$refs.reactContainer);
  },
  emits: ['update:modelValue'],
  methods: {
    getMarkdown() {
      /**
       * The `getMarkdown` method exists on the React Component. We call it
       * and return its return value here.
       */
      return this.wysimark.getMarkdown();
    },
  },
});
</script>
